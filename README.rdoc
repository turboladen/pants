= pants

* https://github.com/turboladen/pants

{<img src="https://travis-ci.org/turboladen/pants.png?branch=master" alt="Build Status" />}[https://travis-ci.org/turboladen/pants]

== DESCRIPTION:

Pants redirects IO using {http://rubyeventmachine.com EventMachine} from one
input source to many different destinations.  In some senses, pants is like a
*nix pipe that allows for duplicating data across many pipes (like splice and
tee).

== FEATURES/PROBLEMS:

All readers can write to any other writer:
* Read/write UDP unicast as packets
* Read/write UDP multicast as packets
* Read/write Files
* Demux A/V files
* Pluggable: write your own reader or writer

=== Concept & Advantage to Pants

The core concept of pants is that without using threads and system calls, it's
difficult to duplicate data.  Pants uses "readers" to read data from a source,
then packetize it in some form that "writers" can consume and use for their
individual needs.  These readers and writers are similar to read and write ends
of a *nix pipe, but with pants the write end to the pipe can be more than one.

Next, pants also uses "seams" to act as a middle-man for readers and writers.  A
seam is just like another reader, but it can read from other readers.  Seams are
primarily useful for doing something to the data from a reader before passing it
on to writers.  For example, the {rtp}[https://github.com/turboladen/rtp] gem
is responsible for (amongst other things) pulling a A/V stream out of an A/V
file, making sure those chunks of data (A/V frames) are sized well for sending
out via UDP, then adding some headers to each on of those chunks (packets), then
actually sending each of those packets to some number of UDP endpoints.  To do
this with pants, it would:

  * Use a reader to read the A/V stream in the file
  * Use a seam to accept the A/V stream data chunks, make sure the chunks are
    sized right, then add an RTP header to each chunk
  * Use a writer to read from the seam and send the data out to a UDP IP/port

If you plan to do the above for just one UDP client, the benefits of pants might
not quite shine through (although it will do this quite quickly, and only in a
maybe three lines of code); if you intend to be sending the RTP-encoded data to
a number of UDP clients though, pants shines in that you will have only had to
spend system resources for reading the file once and encoding the data (which
can be an expensive operation) once before sending it out over the network to
all of your clients.  Quite often, network servers will use multicast to achieve
this, but pants can do this with both unicast and multicast--or both at the same
time, while writing to a file (<-- maybe for debug purposes, for example?).

=== Limitations

The amount of data you can replicate really depends, of course, on system
resources.  On an i7 MacBook Pro with 16GB RAM and 2 wired NICs, I've been able
to duplicate a single 720p video + audio stream over unicast UDP 200 times (pushing ~1.4
Gbps out) with almost no quality loss on client ends.  If you plan to duplicate
more than 20 streams, you'll need to start tweaking EventMachine thread pool
settings; generally you should set EventMachines +threadpool_size+ to the number
of output streams so it can process all of the data concurrently.  If you're on
OSX or *nix, you might benefit from using EventMachine's .epoll and .kqueue
feature.  More on that {http://eventmachine.rubyforge.org/docs/EPOLL.html here}.

File reading/writing also depends on many factors, such as the number and size
of files, disk capabilities, and general I/O capabilities of your system.  If
you'd like to benchmark, there's a {Thor}[http://whatisthor.com] task in
+tasks/+ that will compare pants to FileUtils.cp and `cp` in copying a file
some number of times (default to 100).

Example:

  $ tasks/pantsmark.thor file_copy some_song.mp3 --times=50


== SYNOPSIS:

=== As a library

Read unicast UDP inbound data and write to a number of other unicast UDP clients:

  Pants.read('udp://0.0.0.0:1234') do |seam|
    seam.add_writer('udp://10.0.0.10:1234')
    seam.add_writer('udp://10.0.0.11:1234')
    seam.add_writer('udp://10.0.0.11:2345')
  end

Read multicast UDP inbound data and write to a number of other unicast UDP clients:

  Pants.read('udp://239.0.0.1:1234') do |seam|
    seam.add_writer('udp://10.0.0.10:1234')
    seam.add_writer('udp://10.0.0.11:1234')
    seam.add_writer('udp://10.0.0.11:2345')
  end

Read unicast UDP inbound data and write to a UDP client and a file:

  Pants.read('udp://0.0.0.0:1234') do |seam|
    seam.add_writer('udp://10.0.0.10:1234')
    seam.add_writer('socket_data.raw')
  end

Read a file and send out via UDP:

  Pants.read('socket_data.raw') do |seam|
    seam.add_writer('udp://10.0.0.10:1234')
    seam.add_writer('udp://239.0.0.1:1234')
  end

Get kray-kray:

  EM.threadpool_size = 110
  EM.kqueue         # This has been problematic for me...
  EM.epoll

  Pants.read('udp://0.0.0.0:1234') do |seam|
    100.times do |i|
      seam.add_writer("udp://10.0.0.10:#{1235 + i}")
    end

    10.times do |i|
      seam.add_writer("socket_data_#{i}.raw")
    end
  end


=== As an executable

The examples from above can also be run via the command-line app like this:

  $ pants udp://0.0.0.0:1234 --destinations=udp://10.0.0.10:1234 udp://10.0.0.11:1234 udp://10.0.0.11:2345
  $ pants udp://239.0.0.1:1234 --destinations=udp://10.0.0.10:1234 udp://10.0.0.11:1234 udp://10.0.0.11:2345
  $ pants udp://0.0.0.0:1234 --destinations=udp://10.0.0.10:1234 file:///home/me/socket_data.raw
  $ pants /home/me/socket_data.raw --destinations=udp://10.0.0.10:1234 udp://239.0.0.1:1234

== REQUIREMENTS:

* Rubies (tested)
  * MRI 1.9.2
  * MRI 1.9.3
  * JRuby 1.7.0
* Gems
  * eventmachine (>=1.0.0)
  * log_switch
  * thor

_NOTE:_ Multicasting with JRuby doesn't seem to work; EM fails to allow setting
socket options, which is necessary to do multicasting.

== INSTALL:

* (sudo) gem install

== DEVELOPERS:

After checking out the source, run:

  $ bundle install

This task will install any missing dependencies, run the tests/specs,
and generate the RDoc.

== LICENSE:

(The MIT License)

Copyright (c) 2012 Steve Loveless

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
